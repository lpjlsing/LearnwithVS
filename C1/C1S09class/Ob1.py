#面向对象

# 方法： 面向对象的设计层面
# 函数： 面向过程的层面
# 变量： 在类中，成为 数据成员 ，每个变量为类的一个成员


class A():  # 类，类的参数不要有下划线，类用于 封装代码，类是实体逻辑对应的计算机逻辑反应
            # 一个模块可以定义多个类

    name = 'name1' # 这个位置的 name 为 全局变量, 类的对象，为类变量
    age = 0
  
    # 行为和特征是类的两大特点
    # 行为即是类中的方法def

    def __init__(self,name,age): # 构造函数，自动调用，构造函数只能返回 None 这一种值
                                  # 构造函数可以使模板生成不同的对象
                                  # 初始化对象的属性
                                  # name, age 为传入的参数，后续调用需传入这两个值
        name = name #这里重新定义了name，name为方法内部实例变量
        age = age 
        self.name = name # self来保存对象的实例变量
        print('自动调用')
        return # return后不能返回自定义的值

    def print_file(self): # 函数可以不传入参数，self为第一声明，类中def即是类的 方法
        print('name: ' + self.name) # self 参数进行了把全局变量name 调用为局部变量
        print('age: ' + str(self.age))


# 类和对象
# 类为方法和特征到的抽象描述，类是一个 模板
# 象是类的具体描述，使抽象方法和特征进行实例化

a = A('name',18)  # 这里把类实例化， 类的调用最好是在类的外部调用
a.print_file() # 当类中 A 没有参数，这里可以直接使用 () 来调用类中的方法def
print(id(a)) # a的内存地址
print('~~~~~~~~~~~~~~~~~~~~')
a.__init__('self1',age=19) # 可以调用， 但不建议这样做
print('~~~~~~~~~~~~~~~~~~~~')

# 类和模块全局变量和局部变量不同


